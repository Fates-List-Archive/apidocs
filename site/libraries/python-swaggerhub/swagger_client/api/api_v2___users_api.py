# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class APIV2UsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_bot(self, body, user_id, bot_id, **kwargs):  # noqa: E501
        """Add Bot  # noqa: E501

        Adds a bot to fates list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_bot(body, user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotMeta body: (required)
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_bot_with_http_info(body, user_id, bot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_bot_with_http_info(body, user_id, bot_id, **kwargs)  # noqa: E501
            return data

    def add_bot_with_http_info(self, body, user_id, bot_id, **kwargs):  # noqa: E501
        """Add Bot  # noqa: E501

        Adds a bot to fates list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_bot_with_http_info(body, user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotMeta body: (required)
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id', 'bot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_bot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_bot`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `add_bot`")  # noqa: E501
        # verify the required parameter 'bot_id' is set
        if ('bot_id' not in params or
                params['bot_id'] is None):
            raise ValueError("Missing the required parameter `bot_id` when calling `add_bot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'bot_id' in params:
            path_params['bot_id'] = params['bot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/bots/{bot_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appeal_bot(self, body, user_id, bot_id, **kwargs):  # noqa: E501
        """Appeal Bot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appeal_bot(body, user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotAppeal body: (required)
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appeal_bot_with_http_info(body, user_id, bot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.appeal_bot_with_http_info(body, user_id, bot_id, **kwargs)  # noqa: E501
            return data

    def appeal_bot_with_http_info(self, body, user_id, bot_id, **kwargs):  # noqa: E501
        """Appeal Bot  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appeal_bot_with_http_info(body, user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotAppeal body: (required)
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id', 'bot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appeal_bot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `appeal_bot`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `appeal_bot`")  # noqa: E501
        # verify the required parameter 'bot_id' is set
        if ('bot_id' not in params or
                params['bot_id'] is None):
            raise ValueError("Missing the required parameter `bot_id` when calling `appeal_bot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'bot_id' in params:
            path_params['bot_id'] = params['bot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/bots/{bot_id}/appeal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bot_backup(self, user_id, bot_id, **kwargs):  # noqa: E501
        """Bot Backup  # noqa: E501

        Backs up a bot returning the backup. Backups are not stored  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bot_backup(user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bot_backup_with_http_info(user_id, bot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bot_backup_with_http_info(user_id, bot_id, **kwargs)  # noqa: E501
            return data

    def bot_backup_with_http_info(self, user_id, bot_id, **kwargs):  # noqa: E501
        """Bot Backup  # noqa: E501

        Backs up a bot returning the backup. Backups are not stored  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bot_backup_with_http_info(user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'bot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bot_backup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `bot_backup`")  # noqa: E501
        # verify the required parameter 'bot_id' is set
        if ('bot_id' not in params or
                params['bot_id'] is None):
            raise ValueError("Missing the required parameter `bot_id` when calling `bot_backup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'bot_id' in params:
            path_params['bot_id'] = params['bot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/bots/{bot_id}/backup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def certify_bot_request(self, body, bot_id, user_id, **kwargs):  # noqa: E501
        """Certify Bot Request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.certify_bot_request(body, bot_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotAppeal body: (required)
        :param int bot_id: (required)
        :param int user_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.certify_bot_request_with_http_info(body, bot_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.certify_bot_request_with_http_info(body, bot_id, user_id, **kwargs)  # noqa: E501
            return data

    def certify_bot_request_with_http_info(self, body, bot_id, user_id, **kwargs):  # noqa: E501
        """Certify Bot Request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.certify_bot_request_with_http_info(body, bot_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotAppeal body: (required)
        :param int bot_id: (required)
        :param int user_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bot_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method certify_bot_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `certify_bot_request`")  # noqa: E501
        # verify the required parameter 'bot_id' is set
        if ('bot_id' not in params or
                params['bot_id'] is None):
            raise ValueError("Missing the required parameter `bot_id` when calling `certify_bot_request`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `certify_bot_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bot_id' in params:
            path_params['bot_id'] = params['bot_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/bots/{bot_id}/certification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_bot_pack(self, body, user_id, **kwargs):  # noqa: E501
        """Create Bot Pack  # noqa: E501

        Creates a new bot pack on the list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bot_pack(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotPackPartial body: (required)
        :param int user_id: (required)
        :return: IDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_bot_pack_with_http_info(body, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_bot_pack_with_http_info(body, user_id, **kwargs)  # noqa: E501
            return data

    def create_bot_pack_with_http_info(self, body, user_id, **kwargs):  # noqa: E501
        """Create Bot Pack  # noqa: E501

        Creates a new bot pack on the list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bot_pack_with_http_info(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotPackPartial body: (required)
        :param int user_id: (required)
        :return: IDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bot_pack" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_bot_pack`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `create_bot_pack`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/packs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IDResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_bot(self, user_id, bot_id, **kwargs):  # noqa: E501
        """Delete Bot  # noqa: E501

        Deletes a bot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_bot(user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_bot_with_http_info(user_id, bot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_bot_with_http_info(user_id, bot_id, **kwargs)  # noqa: E501
            return data

    def delete_bot_with_http_info(self, user_id, bot_id, **kwargs):  # noqa: E501
        """Delete Bot  # noqa: E501

        Deletes a bot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_bot_with_http_info(user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'bot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_bot`")  # noqa: E501
        # verify the required parameter 'bot_id' is set
        if ('bot_id' not in params or
                params['bot_id'] is None):
            raise ValueError("Missing the required parameter `bot_id` when calling `delete_bot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'bot_id' in params:
            path_params['bot_id'] = params['bot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/bots/{bot_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_bot_pack(self, user_id, pack_id, **kwargs):  # noqa: E501
        """Delete Bot Pack  # noqa: E501

        Deletes an existing bot pack on the list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_bot_pack(user_id, pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param str pack_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_bot_pack_with_http_info(user_id, pack_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_bot_pack_with_http_info(user_id, pack_id, **kwargs)  # noqa: E501
            return data

    def delete_bot_pack_with_http_info(self, user_id, pack_id, **kwargs):  # noqa: E501
        """Delete Bot Pack  # noqa: E501

        Deletes an existing bot pack on the list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_bot_pack_with_http_info(user_id, pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param str pack_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'pack_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bot_pack" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `delete_bot_pack`")  # noqa: E501
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in params or
                params['pack_id'] is None):
            raise ValueError("Missing the required parameter `pack_id` when calling `delete_bot_pack`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'pack_id' in params:
            path_params['pack_id'] = params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/packs/{pack_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_bot(self, body, user_id, bot_id, **kwargs):  # noqa: E501
        """Edit Bot  # noqa: E501

        Edits a bot, the owner here must be the owner editing the bot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_bot(body, user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotMeta body: (required)
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_bot_with_http_info(body, user_id, bot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_bot_with_http_info(body, user_id, bot_id, **kwargs)  # noqa: E501
            return data

    def edit_bot_with_http_info(self, body, user_id, bot_id, **kwargs):  # noqa: E501
        """Edit Bot  # noqa: E501

        Edits a bot, the owner here must be the owner editing the bot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_bot_with_http_info(body, user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotMeta body: (required)
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id', 'bot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_bot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `edit_bot`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `edit_bot`")  # noqa: E501
        # verify the required parameter 'bot_id' is set
        if ('bot_id' not in params or
                params['bot_id'] is None):
            raise ValueError("Missing the required parameter `bot_id` when calling `edit_bot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'bot_id' in params:
            path_params['bot_id'] = params['bot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/bots/{bot_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fetch_user(self, user_id, **kwargs):  # noqa: E501
        """Fetch User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param bool bot_logs:
        :param bool system_bots:
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fetch_user_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.fetch_user_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def fetch_user_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Fetch User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fetch_user_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :param bool bot_logs:
        :param bool system_bots:
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'bot_logs', 'system_bots']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `fetch_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'bot_logs' in params:
            query_params.append(('bot_logs', params['bot_logs']))  # noqa: E501
        if 'system_bots' in params:
            query_params.append(('system_bots', params['system_bots']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Profile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cache_user(self, user_id, **kwargs):  # noqa: E501
        """Get Cache User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cache_user(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :return: BaseUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cache_user_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cache_user_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def get_cache_user_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get Cache User  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cache_user_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :return: BaseUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cache_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_cache_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/obj', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseUser',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_votes(self, bot_id, user_id, **kwargs):  # noqa: E501
        """Get User Votes  # noqa: E501

        Endpoint to check amount of votes a user has.   **votes** - The amount of votes the bot has.  **voted** - Whether or not the user has *ever* voted for the bot.  **vote_epoch** - The redis TTL of the users vote lock. This is not time_to_vote which is the elapsed time the user has waited since their last vote.  **vts** - A list of timestamps that the user has voted for the bot on that has been recorded.  **time_to_vote** - The time the user has waited since they last voted.  **vote_right_now** - Whether a user can vote right now. Currently equivalent to `vote_epoch < 0`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_votes(bot_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int bot_id: (required)
        :param int user_id: (required)
        :return: BotVoteCheck
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_votes_with_http_info(bot_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_votes_with_http_info(bot_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_user_votes_with_http_info(self, bot_id, user_id, **kwargs):  # noqa: E501
        """Get User Votes  # noqa: E501

        Endpoint to check amount of votes a user has.   **votes** - The amount of votes the bot has.  **voted** - Whether or not the user has *ever* voted for the bot.  **vote_epoch** - The redis TTL of the users vote lock. This is not time_to_vote which is the elapsed time the user has waited since their last vote.  **vts** - A list of timestamps that the user has voted for the bot on that has been recorded.  **time_to_vote** - The time the user has waited since they last voted.  **vote_right_now** - Whether a user can vote right now. Currently equivalent to `vote_epoch < 0`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_votes_with_http_info(bot_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int bot_id: (required)
        :param int user_id: (required)
        :return: BotVoteCheck
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bot_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_votes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bot_id' is set
        if ('bot_id' not in params or
                params['bot_id'] is None):
            raise ValueError("Missing the required parameter `bot_id` when calling `get_user_votes`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_votes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bot_id' in params:
            path_params['bot_id'] = params['bot_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bot', 'User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/bots/{bot_id}/votes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BotVoteCheck',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def regenerate_user_token(self, user_id, **kwargs):  # noqa: E501
        """Regenerate User Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.regenerate_user_token(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.regenerate_user_token_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.regenerate_user_token_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def regenerate_user_token_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Regenerate User Token  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.regenerate_user_token_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int user_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method regenerate_user_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `regenerate_user_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/token', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transfer_bot_ownership(self, body, user_id, bot_id, **kwargs):  # noqa: E501
        """Transfer Bot Ownership  # noqa: E501

        Transfers ownership of a bot. If you are staff, this requires a high enough permission level and for the bot in question to be staff unlocked first  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_bot_ownership(body, user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OwnershipTransfer body: (required)
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transfer_bot_ownership_with_http_info(body, user_id, bot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.transfer_bot_ownership_with_http_info(body, user_id, bot_id, **kwargs)  # noqa: E501
            return data

    def transfer_bot_ownership_with_http_info(self, body, user_id, bot_id, **kwargs):  # noqa: E501
        """Transfer Bot Ownership  # noqa: E501

        Transfers ownership of a bot. If you are staff, this requires a high enough permission level and for the bot in question to be staff unlocked first  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transfer_bot_ownership_with_http_info(body, user_id, bot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param OwnershipTransfer body: (required)
        :param int user_id: (required)
        :param int bot_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id', 'bot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transfer_bot_ownership" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `transfer_bot_ownership`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `transfer_bot_ownership`")  # noqa: E501
        # verify the required parameter 'bot_id' is set
        if ('bot_id' not in params or
                params['bot_id'] is None):
            raise ValueError("Missing the required parameter `bot_id` when calling `transfer_bot_ownership`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'bot_id' in params:
            path_params['bot_id'] = params['bot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/bots/{bot_id}/ownership', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_bot_pack(self, body, user_id, pack_id, **kwargs):  # noqa: E501
        """Update Bot Pack  # noqa: E501

        Updates an existing bot pack on the list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bot_pack(body, user_id, pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotPackPartial body: (required)
        :param int user_id: (required)
        :param str pack_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_bot_pack_with_http_info(body, user_id, pack_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_bot_pack_with_http_info(body, user_id, pack_id, **kwargs)  # noqa: E501
            return data

    def update_bot_pack_with_http_info(self, body, user_id, pack_id, **kwargs):  # noqa: E501
        """Update Bot Pack  # noqa: E501

        Updates an existing bot pack on the list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bot_pack_with_http_info(body, user_id, pack_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BotPackPartial body: (required)
        :param int user_id: (required)
        :param str pack_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id', 'pack_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bot_pack" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_bot_pack`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_bot_pack`")  # noqa: E501
        # verify the required parameter 'pack_id' is set
        if ('pack_id' not in params or
                params['pack_id'] is None):
            raise ValueError("Missing the required parameter `pack_id` when calling `update_bot_pack`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'pack_id' in params:
            path_params['pack_id'] = params['pack_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/packs/{pack_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user_preferences(self, body, user_id, **kwargs):  # noqa: E501
        """Update User Preferences  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_preferences(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateUserPreferences body: (required)
        :param int user_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_preferences_with_http_info(body, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_preferences_with_http_info(body, user_id, **kwargs)  # noqa: E501
            return data

    def update_user_preferences_with_http_info(self, body, user_id, **kwargs):  # noqa: E501
        """Update User Preferences  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_preferences_with_http_info(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateUserPreferences body: (required)
        :param int user_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_preferences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_user_preferences`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_user_preferences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/preferences', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_vote_reminders(self, body, user_id, **kwargs):  # noqa: E501
        """Update Vote Reminders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vote_reminders(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateVoteReminders body: (required)
        :param int user_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_vote_reminders_with_http_info(body, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_vote_reminders_with_http_info(body, user_id, **kwargs)  # noqa: E501
            return data

    def update_vote_reminders_with_http_info(self, body, user_id, **kwargs):  # noqa: E501
        """Update Vote Reminders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vote_reminders_with_http_info(body, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateVoteReminders body: (required)
        :param int user_id: (required)
        :return: APIResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vote_reminders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_vote_reminders`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `update_vote_reminders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['User']  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/users/{user_id}/vote-reminders', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='APIResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
