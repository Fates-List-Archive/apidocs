# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'badges': 'list[Badge]',
        'description': 'str',
        'user_css': 'str',
        'profile_css': 'str',
        'vote_reminder_channel': 'str',
        'js_allowed': 'bool',
        'bot_developer': 'bool',
        'certified_developer': 'bool',
        'state': 'UserState',
        'bot_logs': 'list[BotLogs]'
    }

    attribute_map = {
        'badges': 'badges',
        'description': 'description',
        'user_css': 'user_css',
        'profile_css': 'profile_css',
        'vote_reminder_channel': 'vote_reminder_channel',
        'js_allowed': 'js_allowed',
        'bot_developer': 'bot_developer',
        'certified_developer': 'certified_developer',
        'state': 'state',
        'bot_logs': 'bot_logs'
    }

    def __init__(self, badges=None, description='This user prefers to be a enigma', user_css='', profile_css='', vote_reminder_channel='', js_allowed=None, bot_developer=None, certified_developer=None, state=None, bot_logs=None):  # noqa: E501
        """ProfileData - a model defined in Swagger"""  # noqa: E501
        self._badges = None
        self._description = None
        self._user_css = None
        self._profile_css = None
        self._vote_reminder_channel = None
        self._js_allowed = None
        self._bot_developer = None
        self._certified_developer = None
        self._state = None
        self._bot_logs = None
        self.discriminator = None
        self.badges = badges
        if description is not None:
            self.description = description
        if user_css is not None:
            self.user_css = user_css
        if profile_css is not None:
            self.profile_css = profile_css
        if vote_reminder_channel is not None:
            self.vote_reminder_channel = vote_reminder_channel
        self.js_allowed = js_allowed
        self.bot_developer = bot_developer
        self.certified_developer = certified_developer
        self.state = state
        if bot_logs is not None:
            self.bot_logs = bot_logs

    @property
    def badges(self):
        """Gets the badges of this ProfileData.  # noqa: E501


        :return: The badges of this ProfileData.  # noqa: E501
        :rtype: list[Badge]
        """
        return self._badges

    @badges.setter
    def badges(self, badges):
        """Sets the badges of this ProfileData.


        :param badges: The badges of this ProfileData.  # noqa: E501
        :type: list[Badge]
        """
        if badges is None:
            raise ValueError("Invalid value for `badges`, must not be `None`")  # noqa: E501

        self._badges = badges

    @property
    def description(self):
        """Gets the description of this ProfileData.  # noqa: E501


        :return: The description of this ProfileData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProfileData.


        :param description: The description of this ProfileData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def user_css(self):
        """Gets the user_css of this ProfileData.  # noqa: E501


        :return: The user_css of this ProfileData.  # noqa: E501
        :rtype: str
        """
        return self._user_css

    @user_css.setter
    def user_css(self, user_css):
        """Sets the user_css of this ProfileData.


        :param user_css: The user_css of this ProfileData.  # noqa: E501
        :type: str
        """

        self._user_css = user_css

    @property
    def profile_css(self):
        """Gets the profile_css of this ProfileData.  # noqa: E501


        :return: The profile_css of this ProfileData.  # noqa: E501
        :rtype: str
        """
        return self._profile_css

    @profile_css.setter
    def profile_css(self, profile_css):
        """Sets the profile_css of this ProfileData.


        :param profile_css: The profile_css of this ProfileData.  # noqa: E501
        :type: str
        """

        self._profile_css = profile_css

    @property
    def vote_reminder_channel(self):
        """Gets the vote_reminder_channel of this ProfileData.  # noqa: E501


        :return: The vote_reminder_channel of this ProfileData.  # noqa: E501
        :rtype: str
        """
        return self._vote_reminder_channel

    @vote_reminder_channel.setter
    def vote_reminder_channel(self, vote_reminder_channel):
        """Sets the vote_reminder_channel of this ProfileData.


        :param vote_reminder_channel: The vote_reminder_channel of this ProfileData.  # noqa: E501
        :type: str
        """

        self._vote_reminder_channel = vote_reminder_channel

    @property
    def js_allowed(self):
        """Gets the js_allowed of this ProfileData.  # noqa: E501


        :return: The js_allowed of this ProfileData.  # noqa: E501
        :rtype: bool
        """
        return self._js_allowed

    @js_allowed.setter
    def js_allowed(self, js_allowed):
        """Sets the js_allowed of this ProfileData.


        :param js_allowed: The js_allowed of this ProfileData.  # noqa: E501
        :type: bool
        """
        if js_allowed is None:
            raise ValueError("Invalid value for `js_allowed`, must not be `None`")  # noqa: E501

        self._js_allowed = js_allowed

    @property
    def bot_developer(self):
        """Gets the bot_developer of this ProfileData.  # noqa: E501


        :return: The bot_developer of this ProfileData.  # noqa: E501
        :rtype: bool
        """
        return self._bot_developer

    @bot_developer.setter
    def bot_developer(self, bot_developer):
        """Sets the bot_developer of this ProfileData.


        :param bot_developer: The bot_developer of this ProfileData.  # noqa: E501
        :type: bool
        """
        if bot_developer is None:
            raise ValueError("Invalid value for `bot_developer`, must not be `None`")  # noqa: E501

        self._bot_developer = bot_developer

    @property
    def certified_developer(self):
        """Gets the certified_developer of this ProfileData.  # noqa: E501


        :return: The certified_developer of this ProfileData.  # noqa: E501
        :rtype: bool
        """
        return self._certified_developer

    @certified_developer.setter
    def certified_developer(self, certified_developer):
        """Sets the certified_developer of this ProfileData.


        :param certified_developer: The certified_developer of this ProfileData.  # noqa: E501
        :type: bool
        """
        if certified_developer is None:
            raise ValueError("Invalid value for `certified_developer`, must not be `None`")  # noqa: E501

        self._certified_developer = certified_developer

    @property
    def state(self):
        """Gets the state of this ProfileData.  # noqa: E501


        :return: The state of this ProfileData.  # noqa: E501
        :rtype: UserState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProfileData.


        :param state: The state of this ProfileData.  # noqa: E501
        :type: UserState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def bot_logs(self):
        """Gets the bot_logs of this ProfileData.  # noqa: E501


        :return: The bot_logs of this ProfileData.  # noqa: E501
        :rtype: list[BotLogs]
        """
        return self._bot_logs

    @bot_logs.setter
    def bot_logs(self, bot_logs):
        """Sets the bot_logs of this ProfileData.


        :param bot_logs: The bot_logs of this ProfileData.  # noqa: E501
        :type: list[BotLogs]
        """

        self._bot_logs = bot_logs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
