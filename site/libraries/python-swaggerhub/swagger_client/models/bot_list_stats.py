# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotListStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uptime': 'float',
        'pid': 'int',
        'up': 'bool',
        'server_uptime': 'float',
        'bot_count': 'int',
        'bot_count_total': 'int',
        'workers': 'list[int]'
    }

    attribute_map = {
        'uptime': 'uptime',
        'pid': 'pid',
        'up': 'up',
        'server_uptime': 'server_uptime',
        'bot_count': 'bot_count',
        'bot_count_total': 'bot_count_total',
        'workers': 'workers'
    }

    def __init__(self, uptime=None, pid=None, up=None, server_uptime=None, bot_count=None, bot_count_total=None, workers=None):  # noqa: E501
        """BotListStats - a model defined in Swagger"""  # noqa: E501
        self._uptime = None
        self._pid = None
        self._up = None
        self._server_uptime = None
        self._bot_count = None
        self._bot_count_total = None
        self._workers = None
        self.discriminator = None
        self.uptime = uptime
        self.pid = pid
        self.up = up
        self.server_uptime = server_uptime
        self.bot_count = bot_count
        self.bot_count_total = bot_count_total
        self.workers = workers

    @property
    def uptime(self):
        """Gets the uptime of this BotListStats.  # noqa: E501


        :return: The uptime of this BotListStats.  # noqa: E501
        :rtype: float
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this BotListStats.


        :param uptime: The uptime of this BotListStats.  # noqa: E501
        :type: float
        """
        if uptime is None:
            raise ValueError("Invalid value for `uptime`, must not be `None`")  # noqa: E501

        self._uptime = uptime

    @property
    def pid(self):
        """Gets the pid of this BotListStats.  # noqa: E501


        :return: The pid of this BotListStats.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this BotListStats.


        :param pid: The pid of this BotListStats.  # noqa: E501
        :type: int
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")  # noqa: E501

        self._pid = pid

    @property
    def up(self):
        """Gets the up of this BotListStats.  # noqa: E501


        :return: The up of this BotListStats.  # noqa: E501
        :rtype: bool
        """
        return self._up

    @up.setter
    def up(self, up):
        """Sets the up of this BotListStats.


        :param up: The up of this BotListStats.  # noqa: E501
        :type: bool
        """
        if up is None:
            raise ValueError("Invalid value for `up`, must not be `None`")  # noqa: E501

        self._up = up

    @property
    def server_uptime(self):
        """Gets the server_uptime of this BotListStats.  # noqa: E501


        :return: The server_uptime of this BotListStats.  # noqa: E501
        :rtype: float
        """
        return self._server_uptime

    @server_uptime.setter
    def server_uptime(self, server_uptime):
        """Sets the server_uptime of this BotListStats.


        :param server_uptime: The server_uptime of this BotListStats.  # noqa: E501
        :type: float
        """
        if server_uptime is None:
            raise ValueError("Invalid value for `server_uptime`, must not be `None`")  # noqa: E501

        self._server_uptime = server_uptime

    @property
    def bot_count(self):
        """Gets the bot_count of this BotListStats.  # noqa: E501


        :return: The bot_count of this BotListStats.  # noqa: E501
        :rtype: int
        """
        return self._bot_count

    @bot_count.setter
    def bot_count(self, bot_count):
        """Sets the bot_count of this BotListStats.


        :param bot_count: The bot_count of this BotListStats.  # noqa: E501
        :type: int
        """
        if bot_count is None:
            raise ValueError("Invalid value for `bot_count`, must not be `None`")  # noqa: E501

        self._bot_count = bot_count

    @property
    def bot_count_total(self):
        """Gets the bot_count_total of this BotListStats.  # noqa: E501


        :return: The bot_count_total of this BotListStats.  # noqa: E501
        :rtype: int
        """
        return self._bot_count_total

    @bot_count_total.setter
    def bot_count_total(self, bot_count_total):
        """Sets the bot_count_total of this BotListStats.


        :param bot_count_total: The bot_count_total of this BotListStats.  # noqa: E501
        :type: int
        """
        if bot_count_total is None:
            raise ValueError("Invalid value for `bot_count_total`, must not be `None`")  # noqa: E501

        self._bot_count_total = bot_count_total

    @property
    def workers(self):
        """Gets the workers of this BotListStats.  # noqa: E501


        :return: The workers of this BotListStats.  # noqa: E501
        :rtype: list[int]
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """Sets the workers of this BotListStats.


        :param workers: The workers of this BotListStats.  # noqa: E501
        :type: list[int]
        """
        if workers is None:
            raise ValueError("Invalid value for `workers`, must not be `None`")  # noqa: E501

        self._workers = workers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotListStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotListStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
