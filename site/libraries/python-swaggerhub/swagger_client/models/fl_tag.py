# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FLTag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'iconify_data': 'str',
        'id': 'str',
        'owner_guild': 'str'
    }

    attribute_map = {
        'name': 'name',
        'iconify_data': 'iconify_data',
        'id': 'id',
        'owner_guild': 'owner_guild'
    }

    def __init__(self, name=None, iconify_data=None, id=None, owner_guild=''):  # noqa: E501
        """FLTag - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._iconify_data = None
        self._id = None
        self._owner_guild = None
        self.discriminator = None
        self.name = name
        self.iconify_data = iconify_data
        self.id = id
        if owner_guild is not None:
            self.owner_guild = owner_guild

    @property
    def name(self):
        """Gets the name of this FLTag.  # noqa: E501


        :return: The name of this FLTag.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FLTag.


        :param name: The name of this FLTag.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def iconify_data(self):
        """Gets the iconify_data of this FLTag.  # noqa: E501


        :return: The iconify_data of this FLTag.  # noqa: E501
        :rtype: str
        """
        return self._iconify_data

    @iconify_data.setter
    def iconify_data(self, iconify_data):
        """Sets the iconify_data of this FLTag.


        :param iconify_data: The iconify_data of this FLTag.  # noqa: E501
        :type: str
        """
        if iconify_data is None:
            raise ValueError("Invalid value for `iconify_data`, must not be `None`")  # noqa: E501

        self._iconify_data = iconify_data

    @property
    def id(self):
        """Gets the id of this FLTag.  # noqa: E501


        :return: The id of this FLTag.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FLTag.


        :param id: The id of this FLTag.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def owner_guild(self):
        """Gets the owner_guild of this FLTag.  # noqa: E501


        :return: The owner_guild of this FLTag.  # noqa: E501
        :rtype: str
        """
        return self._owner_guild

    @owner_guild.setter
    def owner_guild(self, owner_guild):
        """Sets the owner_guild of this FLTag.


        :param owner_guild: The owner_guild of this FLTag.  # noqa: E501
        :type: str
        """

        self._owner_guild = owner_guild

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FLTag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FLTag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
