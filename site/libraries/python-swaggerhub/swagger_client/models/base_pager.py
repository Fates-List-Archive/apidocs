# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BasePager(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_count': 'int',
        'total_pages': 'int',
        'per_page': 'int',
        '_from': 'int',
        'to': 'int'
    }

    attribute_map = {
        'total_count': 'total_count',
        'total_pages': 'total_pages',
        'per_page': 'per_page',
        '_from': 'from',
        'to': 'to'
    }

    def __init__(self, total_count=None, total_pages=None, per_page=None, _from=None, to=None):  # noqa: E501
        """BasePager - a model defined in Swagger"""  # noqa: E501
        self._total_count = None
        self._total_pages = None
        self._per_page = None
        self.__from = None
        self._to = None
        self.discriminator = None
        self.total_count = total_count
        self.total_pages = total_pages
        self.per_page = per_page
        self._from = _from
        self.to = to

    @property
    def total_count(self):
        """Gets the total_count of this BasePager.  # noqa: E501


        :return: The total_count of this BasePager.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this BasePager.


        :param total_count: The total_count of this BasePager.  # noqa: E501
        :type: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    @property
    def total_pages(self):
        """Gets the total_pages of this BasePager.  # noqa: E501


        :return: The total_pages of this BasePager.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this BasePager.


        :param total_pages: The total_pages of this BasePager.  # noqa: E501
        :type: int
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")  # noqa: E501

        self._total_pages = total_pages

    @property
    def per_page(self):
        """Gets the per_page of this BasePager.  # noqa: E501


        :return: The per_page of this BasePager.  # noqa: E501
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this BasePager.


        :param per_page: The per_page of this BasePager.  # noqa: E501
        :type: int
        """
        if per_page is None:
            raise ValueError("Invalid value for `per_page`, must not be `None`")  # noqa: E501

        self._per_page = per_page

    @property
    def _from(self):
        """Gets the _from of this BasePager.  # noqa: E501


        :return: The _from of this BasePager.  # noqa: E501
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this BasePager.


        :param _from: The _from of this BasePager.  # noqa: E501
        :type: int
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this BasePager.  # noqa: E501


        :return: The to of this BasePager.  # noqa: E501
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this BasePager.


        :param to: The to of this BasePager.  # noqa: E501
        :type: int
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BasePager, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasePager):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
