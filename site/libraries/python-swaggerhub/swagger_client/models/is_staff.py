# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IsStaff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'staff': 'bool',
        'perm': 'int',
        'sm': 'StaffRole'
    }

    attribute_map = {
        'staff': 'staff',
        'perm': 'perm',
        'sm': 'sm'
    }

    def __init__(self, staff=None, perm=None, sm=None):  # noqa: E501
        """IsStaff - a model defined in Swagger"""  # noqa: E501
        self._staff = None
        self._perm = None
        self._sm = None
        self.discriminator = None
        self.staff = staff
        self.perm = perm
        self.sm = sm

    @property
    def staff(self):
        """Gets the staff of this IsStaff.  # noqa: E501


        :return: The staff of this IsStaff.  # noqa: E501
        :rtype: bool
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this IsStaff.


        :param staff: The staff of this IsStaff.  # noqa: E501
        :type: bool
        """
        if staff is None:
            raise ValueError("Invalid value for `staff`, must not be `None`")  # noqa: E501

        self._staff = staff

    @property
    def perm(self):
        """Gets the perm of this IsStaff.  # noqa: E501


        :return: The perm of this IsStaff.  # noqa: E501
        :rtype: int
        """
        return self._perm

    @perm.setter
    def perm(self, perm):
        """Sets the perm of this IsStaff.


        :param perm: The perm of this IsStaff.  # noqa: E501
        :type: int
        """
        if perm is None:
            raise ValueError("Invalid value for `perm`, must not be `None`")  # noqa: E501

        self._perm = perm

    @property
    def sm(self):
        """Gets the sm of this IsStaff.  # noqa: E501


        :return: The sm of this IsStaff.  # noqa: E501
        :rtype: StaffRole
        """
        return self._sm

    @sm.setter
    def sm(self, sm):
        """Sets the sm of this IsStaff.


        :param sm: The sm of this IsStaff.  # noqa: E501
        :type: StaffRole
        """
        if sm is None:
            raise ValueError("Invalid value for `sm`, must not be `None`")  # noqa: E501

        self._sm = sm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IsStaff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IsStaff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
