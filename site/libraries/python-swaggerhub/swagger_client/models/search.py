# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Search(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bots': 'list[object]',
        'servers': 'list[object]',
        'profiles': 'list[object]',
        'packs': 'list[BotPack]',
        'tags': 'dict(str, FLTags)',
        'features': 'BotFeatures'
    }

    attribute_map = {
        'bots': 'bots',
        'servers': 'servers',
        'profiles': 'profiles',
        'packs': 'packs',
        'tags': 'tags',
        'features': 'features'
    }

    def __init__(self, bots=None, servers=None, profiles=None, packs=None, tags=None, features=None):  # noqa: E501
        """Search - a model defined in Swagger"""  # noqa: E501
        self._bots = None
        self._servers = None
        self._profiles = None
        self._packs = None
        self._tags = None
        self._features = None
        self.discriminator = None
        if bots is not None:
            self.bots = bots
        if servers is not None:
            self.servers = servers
        if profiles is not None:
            self.profiles = profiles
        if packs is not None:
            self.packs = packs
        self.tags = tags
        if features is not None:
            self.features = features

    @property
    def bots(self):
        """Gets the bots of this Search.  # noqa: E501


        :return: The bots of this Search.  # noqa: E501
        :rtype: list[object]
        """
        return self._bots

    @bots.setter
    def bots(self, bots):
        """Sets the bots of this Search.


        :param bots: The bots of this Search.  # noqa: E501
        :type: list[object]
        """

        self._bots = bots

    @property
    def servers(self):
        """Gets the servers of this Search.  # noqa: E501


        :return: The servers of this Search.  # noqa: E501
        :rtype: list[object]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this Search.


        :param servers: The servers of this Search.  # noqa: E501
        :type: list[object]
        """

        self._servers = servers

    @property
    def profiles(self):
        """Gets the profiles of this Search.  # noqa: E501


        :return: The profiles of this Search.  # noqa: E501
        :rtype: list[object]
        """
        return self._profiles

    @profiles.setter
    def profiles(self, profiles):
        """Sets the profiles of this Search.


        :param profiles: The profiles of this Search.  # noqa: E501
        :type: list[object]
        """

        self._profiles = profiles

    @property
    def packs(self):
        """Gets the packs of this Search.  # noqa: E501


        :return: The packs of this Search.  # noqa: E501
        :rtype: list[BotPack]
        """
        return self._packs

    @packs.setter
    def packs(self, packs):
        """Sets the packs of this Search.


        :param packs: The packs of this Search.  # noqa: E501
        :type: list[BotPack]
        """

        self._packs = packs

    @property
    def tags(self):
        """Gets the tags of this Search.  # noqa: E501


        :return: The tags of this Search.  # noqa: E501
        :rtype: dict(str, FLTags)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Search.


        :param tags: The tags of this Search.  # noqa: E501
        :type: dict(str, FLTags)
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def features(self):
        """Gets the features of this Search.  # noqa: E501


        :return: The features of this Search.  # noqa: E501
        :rtype: BotFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Search.


        :param features: The features of this Search.  # noqa: E501
        :type: BotFeatures
        """

        self._features = features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Search, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Search):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
