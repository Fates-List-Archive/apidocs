# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateUserPreferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'profile_css': 'str',
        'user_css': 'str',
        'site_lang': 'SiteLang',
        'vote_reminder_channel': 'str'
    }

    attribute_map = {
        'description': 'description',
        'profile_css': 'profile_css',
        'user_css': 'user_css',
        'site_lang': 'site_lang',
        'vote_reminder_channel': 'vote_reminder_channel'
    }

    def __init__(self, description=None, profile_css=None, user_css=None, site_lang=None, vote_reminder_channel=None):  # noqa: E501
        """UpdateUserPreferences - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._profile_css = None
        self._user_css = None
        self._site_lang = None
        self._vote_reminder_channel = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if profile_css is not None:
            self.profile_css = profile_css
        if user_css is not None:
            self.user_css = user_css
        if site_lang is not None:
            self.site_lang = site_lang
        if vote_reminder_channel is not None:
            self.vote_reminder_channel = vote_reminder_channel

    @property
    def description(self):
        """Gets the description of this UpdateUserPreferences.  # noqa: E501


        :return: The description of this UpdateUserPreferences.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateUserPreferences.


        :param description: The description of this UpdateUserPreferences.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def profile_css(self):
        """Gets the profile_css of this UpdateUserPreferences.  # noqa: E501


        :return: The profile_css of this UpdateUserPreferences.  # noqa: E501
        :rtype: str
        """
        return self._profile_css

    @profile_css.setter
    def profile_css(self, profile_css):
        """Sets the profile_css of this UpdateUserPreferences.


        :param profile_css: The profile_css of this UpdateUserPreferences.  # noqa: E501
        :type: str
        """

        self._profile_css = profile_css

    @property
    def user_css(self):
        """Gets the user_css of this UpdateUserPreferences.  # noqa: E501


        :return: The user_css of this UpdateUserPreferences.  # noqa: E501
        :rtype: str
        """
        return self._user_css

    @user_css.setter
    def user_css(self, user_css):
        """Sets the user_css of this UpdateUserPreferences.


        :param user_css: The user_css of this UpdateUserPreferences.  # noqa: E501
        :type: str
        """

        self._user_css = user_css

    @property
    def site_lang(self):
        """Gets the site_lang of this UpdateUserPreferences.  # noqa: E501


        :return: The site_lang of this UpdateUserPreferences.  # noqa: E501
        :rtype: SiteLang
        """
        return self._site_lang

    @site_lang.setter
    def site_lang(self, site_lang):
        """Sets the site_lang of this UpdateUserPreferences.


        :param site_lang: The site_lang of this UpdateUserPreferences.  # noqa: E501
        :type: SiteLang
        """

        self._site_lang = site_lang

    @property
    def vote_reminder_channel(self):
        """Gets the vote_reminder_channel of this UpdateUserPreferences.  # noqa: E501


        :return: The vote_reminder_channel of this UpdateUserPreferences.  # noqa: E501
        :rtype: str
        """
        return self._vote_reminder_channel

    @vote_reminder_channel.setter
    def vote_reminder_channel(self, vote_reminder_channel):
        """Sets the vote_reminder_channel of this UpdateUserPreferences.


        :param vote_reminder_channel: The vote_reminder_channel of this UpdateUserPreferences.  # noqa: E501
        :type: str
        """

        self._vote_reminder_channel = vote_reminder_channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateUserPreferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateUserPreferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
