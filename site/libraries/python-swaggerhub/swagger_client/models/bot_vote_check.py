# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotVoteCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'votes': 'int',
        'voted': 'bool',
        'vote_right_now': 'bool',
        'vote_epoch': 'int',
        'time_to_vote': 'int',
        'vts': 'list[object]'
    }

    attribute_map = {
        'votes': 'votes',
        'voted': 'voted',
        'vote_right_now': 'vote_right_now',
        'vote_epoch': 'vote_epoch',
        'time_to_vote': 'time_to_vote',
        'vts': 'vts'
    }

    def __init__(self, votes=None, voted=None, vote_right_now=None, vote_epoch=None, time_to_vote=None, vts=None):  # noqa: E501
        """BotVoteCheck - a model defined in Swagger"""  # noqa: E501
        self._votes = None
        self._voted = None
        self._vote_right_now = None
        self._vote_epoch = None
        self._time_to_vote = None
        self._vts = None
        self.discriminator = None
        self.votes = votes
        self.voted = voted
        if vote_right_now is not None:
            self.vote_right_now = vote_right_now
        if vote_epoch is not None:
            self.vote_epoch = vote_epoch
        if time_to_vote is not None:
            self.time_to_vote = time_to_vote
        if vts is not None:
            self.vts = vts

    @property
    def votes(self):
        """Gets the votes of this BotVoteCheck.  # noqa: E501


        :return: The votes of this BotVoteCheck.  # noqa: E501
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this BotVoteCheck.


        :param votes: The votes of this BotVoteCheck.  # noqa: E501
        :type: int
        """
        if votes is None:
            raise ValueError("Invalid value for `votes`, must not be `None`")  # noqa: E501

        self._votes = votes

    @property
    def voted(self):
        """Gets the voted of this BotVoteCheck.  # noqa: E501


        :return: The voted of this BotVoteCheck.  # noqa: E501
        :rtype: bool
        """
        return self._voted

    @voted.setter
    def voted(self, voted):
        """Sets the voted of this BotVoteCheck.


        :param voted: The voted of this BotVoteCheck.  # noqa: E501
        :type: bool
        """
        if voted is None:
            raise ValueError("Invalid value for `voted`, must not be `None`")  # noqa: E501

        self._voted = voted

    @property
    def vote_right_now(self):
        """Gets the vote_right_now of this BotVoteCheck.  # noqa: E501


        :return: The vote_right_now of this BotVoteCheck.  # noqa: E501
        :rtype: bool
        """
        return self._vote_right_now

    @vote_right_now.setter
    def vote_right_now(self, vote_right_now):
        """Sets the vote_right_now of this BotVoteCheck.


        :param vote_right_now: The vote_right_now of this BotVoteCheck.  # noqa: E501
        :type: bool
        """

        self._vote_right_now = vote_right_now

    @property
    def vote_epoch(self):
        """Gets the vote_epoch of this BotVoteCheck.  # noqa: E501


        :return: The vote_epoch of this BotVoteCheck.  # noqa: E501
        :rtype: int
        """
        return self._vote_epoch

    @vote_epoch.setter
    def vote_epoch(self, vote_epoch):
        """Sets the vote_epoch of this BotVoteCheck.


        :param vote_epoch: The vote_epoch of this BotVoteCheck.  # noqa: E501
        :type: int
        """

        self._vote_epoch = vote_epoch

    @property
    def time_to_vote(self):
        """Gets the time_to_vote of this BotVoteCheck.  # noqa: E501


        :return: The time_to_vote of this BotVoteCheck.  # noqa: E501
        :rtype: int
        """
        return self._time_to_vote

    @time_to_vote.setter
    def time_to_vote(self, time_to_vote):
        """Sets the time_to_vote of this BotVoteCheck.


        :param time_to_vote: The time_to_vote of this BotVoteCheck.  # noqa: E501
        :type: int
        """

        self._time_to_vote = time_to_vote

    @property
    def vts(self):
        """Gets the vts of this BotVoteCheck.  # noqa: E501


        :return: The vts of this BotVoteCheck.  # noqa: E501
        :rtype: list[object]
        """
        return self._vts

    @vts.setter
    def vts(self, vts):
        """Sets the vts of this BotVoteCheck.


        :param vts: The vts of this BotVoteCheck.  # noqa: E501
        :type: list[object]
        """

        self._vts = vts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotVoteCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotVoteCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
