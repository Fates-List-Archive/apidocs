# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guild_count': 'int',
        'shard_count': 'int',
        'shards': 'list[int]',
        'user_count': 'int'
    }

    attribute_map = {
        'guild_count': 'guild_count',
        'shard_count': 'shard_count',
        'shards': 'shards',
        'user_count': 'user_count'
    }

    def __init__(self, guild_count=None, shard_count=None, shards=None, user_count=None):  # noqa: E501
        """BotStats - a model defined in Swagger"""  # noqa: E501
        self._guild_count = None
        self._shard_count = None
        self._shards = None
        self._user_count = None
        self.discriminator = None
        self.guild_count = guild_count
        if shard_count is not None:
            self.shard_count = shard_count
        if shards is not None:
            self.shards = shards
        if user_count is not None:
            self.user_count = user_count

    @property
    def guild_count(self):
        """Gets the guild_count of this BotStats.  # noqa: E501


        :return: The guild_count of this BotStats.  # noqa: E501
        :rtype: int
        """
        return self._guild_count

    @guild_count.setter
    def guild_count(self, guild_count):
        """Sets the guild_count of this BotStats.


        :param guild_count: The guild_count of this BotStats.  # noqa: E501
        :type: int
        """
        if guild_count is None:
            raise ValueError("Invalid value for `guild_count`, must not be `None`")  # noqa: E501

        self._guild_count = guild_count

    @property
    def shard_count(self):
        """Gets the shard_count of this BotStats.  # noqa: E501


        :return: The shard_count of this BotStats.  # noqa: E501
        :rtype: int
        """
        return self._shard_count

    @shard_count.setter
    def shard_count(self, shard_count):
        """Sets the shard_count of this BotStats.


        :param shard_count: The shard_count of this BotStats.  # noqa: E501
        :type: int
        """

        self._shard_count = shard_count

    @property
    def shards(self):
        """Gets the shards of this BotStats.  # noqa: E501


        :return: The shards of this BotStats.  # noqa: E501
        :rtype: list[int]
        """
        return self._shards

    @shards.setter
    def shards(self, shards):
        """Sets the shards of this BotStats.


        :param shards: The shards of this BotStats.  # noqa: E501
        :type: list[int]
        """

        self._shards = shards

    @property
    def user_count(self):
        """Gets the user_count of this BotStats.  # noqa: E501


        :return: The user_count of this BotStats.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this BotStats.


        :param user_count: The user_count of this BotStats.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
