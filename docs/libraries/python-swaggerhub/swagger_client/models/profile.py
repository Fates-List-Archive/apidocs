# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bots': 'list[ProfileBot]',
        'approved_bots': 'list[ProfileBot]',
        'certified_bots': 'list[ProfileBot]',
        'profile': 'ProfileData',
        'site_lang': 'str',
        'user': 'BaseUser',
        'bot_logs': 'list[object]',
        'packs': 'list[BotPack]'
    }

    attribute_map = {
        'bots': 'bots',
        'approved_bots': 'approved_bots',
        'certified_bots': 'certified_bots',
        'profile': 'profile',
        'site_lang': 'site_lang',
        'user': 'user',
        'bot_logs': 'bot_logs',
        'packs': 'packs'
    }

    def __init__(self, bots=None, approved_bots=None, certified_bots=None, profile=None, site_lang=None, user=None, bot_logs=None, packs=None):  # noqa: E501
        """Profile - a model defined in Swagger"""  # noqa: E501
        self._bots = None
        self._approved_bots = None
        self._certified_bots = None
        self._profile = None
        self._site_lang = None
        self._user = None
        self._bot_logs = None
        self._packs = None
        self.discriminator = None
        self.bots = bots
        self.approved_bots = approved_bots
        self.certified_bots = certified_bots
        self.profile = profile
        if site_lang is not None:
            self.site_lang = site_lang
        self.user = user
        if bot_logs is not None:
            self.bot_logs = bot_logs
        self.packs = packs

    @property
    def bots(self):
        """Gets the bots of this Profile.  # noqa: E501


        :return: The bots of this Profile.  # noqa: E501
        :rtype: list[ProfileBot]
        """
        return self._bots

    @bots.setter
    def bots(self, bots):
        """Sets the bots of this Profile.


        :param bots: The bots of this Profile.  # noqa: E501
        :type: list[ProfileBot]
        """
        if bots is None:
            raise ValueError("Invalid value for `bots`, must not be `None`")  # noqa: E501

        self._bots = bots

    @property
    def approved_bots(self):
        """Gets the approved_bots of this Profile.  # noqa: E501


        :return: The approved_bots of this Profile.  # noqa: E501
        :rtype: list[ProfileBot]
        """
        return self._approved_bots

    @approved_bots.setter
    def approved_bots(self, approved_bots):
        """Sets the approved_bots of this Profile.


        :param approved_bots: The approved_bots of this Profile.  # noqa: E501
        :type: list[ProfileBot]
        """
        if approved_bots is None:
            raise ValueError("Invalid value for `approved_bots`, must not be `None`")  # noqa: E501

        self._approved_bots = approved_bots

    @property
    def certified_bots(self):
        """Gets the certified_bots of this Profile.  # noqa: E501


        :return: The certified_bots of this Profile.  # noqa: E501
        :rtype: list[ProfileBot]
        """
        return self._certified_bots

    @certified_bots.setter
    def certified_bots(self, certified_bots):
        """Sets the certified_bots of this Profile.


        :param certified_bots: The certified_bots of this Profile.  # noqa: E501
        :type: list[ProfileBot]
        """
        if certified_bots is None:
            raise ValueError("Invalid value for `certified_bots`, must not be `None`")  # noqa: E501

        self._certified_bots = certified_bots

    @property
    def profile(self):
        """Gets the profile of this Profile.  # noqa: E501


        :return: The profile of this Profile.  # noqa: E501
        :rtype: ProfileData
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Profile.


        :param profile: The profile of this Profile.  # noqa: E501
        :type: ProfileData
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")  # noqa: E501

        self._profile = profile

    @property
    def site_lang(self):
        """Gets the site_lang of this Profile.  # noqa: E501


        :return: The site_lang of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._site_lang

    @site_lang.setter
    def site_lang(self, site_lang):
        """Sets the site_lang of this Profile.


        :param site_lang: The site_lang of this Profile.  # noqa: E501
        :type: str
        """

        self._site_lang = site_lang

    @property
    def user(self):
        """Gets the user of this Profile.  # noqa: E501


        :return: The user of this Profile.  # noqa: E501
        :rtype: BaseUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Profile.


        :param user: The user of this Profile.  # noqa: E501
        :type: BaseUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def bot_logs(self):
        """Gets the bot_logs of this Profile.  # noqa: E501


        :return: The bot_logs of this Profile.  # noqa: E501
        :rtype: list[object]
        """
        return self._bot_logs

    @bot_logs.setter
    def bot_logs(self, bot_logs):
        """Sets the bot_logs of this Profile.


        :param bot_logs: The bot_logs of this Profile.  # noqa: E501
        :type: list[object]
        """

        self._bot_logs = bot_logs

    @property
    def packs(self):
        """Gets the packs of this Profile.  # noqa: E501


        :return: The packs of this Profile.  # noqa: E501
        :rtype: list[BotPack]
        """
        return self._packs

    @packs.setter
    def packs(self, packs):
        """Sets the packs of this Profile.


        :param packs: The packs of this Profile.  # noqa: E501
        :type: list[BotPack]
        """
        if packs is None:
            raise ValueError("Invalid value for `packs`, must not be `None`")  # noqa: E501

        self._packs = packs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
