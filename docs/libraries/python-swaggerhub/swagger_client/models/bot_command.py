# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cmd_type': 'CommandType',
        'cmd_groups': 'list[str]',
        'cmd_name': 'str',
        'vote_locked': 'bool',
        'description': 'str',
        'args': 'list[object]',
        'examples': 'list[object]',
        'premium_only': 'bool',
        'notes': 'list[object]',
        'doc_link': 'str'
    }

    attribute_map = {
        'cmd_type': 'cmd_type',
        'cmd_groups': 'cmd_groups',
        'cmd_name': 'cmd_name',
        'vote_locked': 'vote_locked',
        'description': 'description',
        'args': 'args',
        'examples': 'examples',
        'premium_only': 'premium_only',
        'notes': 'notes',
        'doc_link': 'doc_link'
    }

    def __init__(self, cmd_type=None, cmd_groups=None, cmd_name=None, vote_locked=None, description=None, args=None, examples=None, premium_only=False, notes=None, doc_link=''):  # noqa: E501
        """BotCommand - a model defined in Swagger"""  # noqa: E501
        self._cmd_type = None
        self._cmd_groups = None
        self._cmd_name = None
        self._vote_locked = None
        self._description = None
        self._args = None
        self._examples = None
        self._premium_only = None
        self._notes = None
        self._doc_link = None
        self.discriminator = None
        self.cmd_type = cmd_type
        if cmd_groups is not None:
            self.cmd_groups = cmd_groups
        self.cmd_name = cmd_name
        self.vote_locked = vote_locked
        self.description = description
        if args is not None:
            self.args = args
        if examples is not None:
            self.examples = examples
        if premium_only is not None:
            self.premium_only = premium_only
        if notes is not None:
            self.notes = notes
        if doc_link is not None:
            self.doc_link = doc_link

    @property
    def cmd_type(self):
        """Gets the cmd_type of this BotCommand.  # noqa: E501


        :return: The cmd_type of this BotCommand.  # noqa: E501
        :rtype: CommandType
        """
        return self._cmd_type

    @cmd_type.setter
    def cmd_type(self, cmd_type):
        """Sets the cmd_type of this BotCommand.


        :param cmd_type: The cmd_type of this BotCommand.  # noqa: E501
        :type: CommandType
        """
        if cmd_type is None:
            raise ValueError("Invalid value for `cmd_type`, must not be `None`")  # noqa: E501

        self._cmd_type = cmd_type

    @property
    def cmd_groups(self):
        """Gets the cmd_groups of this BotCommand.  # noqa: E501


        :return: The cmd_groups of this BotCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._cmd_groups

    @cmd_groups.setter
    def cmd_groups(self, cmd_groups):
        """Sets the cmd_groups of this BotCommand.


        :param cmd_groups: The cmd_groups of this BotCommand.  # noqa: E501
        :type: list[str]
        """

        self._cmd_groups = cmd_groups

    @property
    def cmd_name(self):
        """Gets the cmd_name of this BotCommand.  # noqa: E501


        :return: The cmd_name of this BotCommand.  # noqa: E501
        :rtype: str
        """
        return self._cmd_name

    @cmd_name.setter
    def cmd_name(self, cmd_name):
        """Sets the cmd_name of this BotCommand.


        :param cmd_name: The cmd_name of this BotCommand.  # noqa: E501
        :type: str
        """
        if cmd_name is None:
            raise ValueError("Invalid value for `cmd_name`, must not be `None`")  # noqa: E501

        self._cmd_name = cmd_name

    @property
    def vote_locked(self):
        """Gets the vote_locked of this BotCommand.  # noqa: E501


        :return: The vote_locked of this BotCommand.  # noqa: E501
        :rtype: bool
        """
        return self._vote_locked

    @vote_locked.setter
    def vote_locked(self, vote_locked):
        """Sets the vote_locked of this BotCommand.


        :param vote_locked: The vote_locked of this BotCommand.  # noqa: E501
        :type: bool
        """
        if vote_locked is None:
            raise ValueError("Invalid value for `vote_locked`, must not be `None`")  # noqa: E501

        self._vote_locked = vote_locked

    @property
    def description(self):
        """Gets the description of this BotCommand.  # noqa: E501


        :return: The description of this BotCommand.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BotCommand.


        :param description: The description of this BotCommand.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def args(self):
        """Gets the args of this BotCommand.  # noqa: E501


        :return: The args of this BotCommand.  # noqa: E501
        :rtype: list[object]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this BotCommand.


        :param args: The args of this BotCommand.  # noqa: E501
        :type: list[object]
        """

        self._args = args

    @property
    def examples(self):
        """Gets the examples of this BotCommand.  # noqa: E501


        :return: The examples of this BotCommand.  # noqa: E501
        :rtype: list[object]
        """
        return self._examples

    @examples.setter
    def examples(self, examples):
        """Sets the examples of this BotCommand.


        :param examples: The examples of this BotCommand.  # noqa: E501
        :type: list[object]
        """

        self._examples = examples

    @property
    def premium_only(self):
        """Gets the premium_only of this BotCommand.  # noqa: E501


        :return: The premium_only of this BotCommand.  # noqa: E501
        :rtype: bool
        """
        return self._premium_only

    @premium_only.setter
    def premium_only(self, premium_only):
        """Sets the premium_only of this BotCommand.


        :param premium_only: The premium_only of this BotCommand.  # noqa: E501
        :type: bool
        """

        self._premium_only = premium_only

    @property
    def notes(self):
        """Gets the notes of this BotCommand.  # noqa: E501


        :return: The notes of this BotCommand.  # noqa: E501
        :rtype: list[object]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this BotCommand.


        :param notes: The notes of this BotCommand.  # noqa: E501
        :type: list[object]
        """

        self._notes = notes

    @property
    def doc_link(self):
        """Gets the doc_link of this BotCommand.  # noqa: E501


        :return: The doc_link of this BotCommand.  # noqa: E501
        :rtype: str
        """
        return self._doc_link

    @doc_link.setter
    def doc_link(self, doc_link):
        """Sets the doc_link of this BotCommand.


        :param doc_link: The doc_link of this BotCommand.  # noqa: E501
        :type: str
        """

        self._doc_link = doc_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
