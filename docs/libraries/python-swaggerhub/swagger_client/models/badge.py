# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Badge(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'image': 'str',
        'staff': 'bool',
        'cert_dev': 'bool',
        'bot_dev': 'bool',
        'support_server_member': 'bool',
        'everyone': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'image': 'image',
        'staff': 'staff',
        'cert_dev': 'cert_dev',
        'bot_dev': 'bot_dev',
        'support_server_member': 'support_server_member',
        'everyone': 'everyone'
    }

    def __init__(self, id=None, name=None, description=None, image=None, staff=False, cert_dev=False, bot_dev=False, support_server_member=False, everyone=False):  # noqa: E501
        """Badge - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._image = None
        self._staff = None
        self._cert_dev = None
        self._bot_dev = None
        self._support_server_member = None
        self._everyone = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.description = description
        self.image = image
        if staff is not None:
            self.staff = staff
        if cert_dev is not None:
            self.cert_dev = cert_dev
        if bot_dev is not None:
            self.bot_dev = bot_dev
        if support_server_member is not None:
            self.support_server_member = support_server_member
        if everyone is not None:
            self.everyone = everyone

    @property
    def id(self):
        """Gets the id of this Badge.  # noqa: E501


        :return: The id of this Badge.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Badge.


        :param id: The id of this Badge.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Badge.  # noqa: E501


        :return: The name of this Badge.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Badge.


        :param name: The name of this Badge.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Badge.  # noqa: E501


        :return: The description of this Badge.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Badge.


        :param description: The description of this Badge.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def image(self):
        """Gets the image of this Badge.  # noqa: E501


        :return: The image of this Badge.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Badge.


        :param image: The image of this Badge.  # noqa: E501
        :type: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def staff(self):
        """Gets the staff of this Badge.  # noqa: E501


        :return: The staff of this Badge.  # noqa: E501
        :rtype: bool
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this Badge.


        :param staff: The staff of this Badge.  # noqa: E501
        :type: bool
        """

        self._staff = staff

    @property
    def cert_dev(self):
        """Gets the cert_dev of this Badge.  # noqa: E501


        :return: The cert_dev of this Badge.  # noqa: E501
        :rtype: bool
        """
        return self._cert_dev

    @cert_dev.setter
    def cert_dev(self, cert_dev):
        """Sets the cert_dev of this Badge.


        :param cert_dev: The cert_dev of this Badge.  # noqa: E501
        :type: bool
        """

        self._cert_dev = cert_dev

    @property
    def bot_dev(self):
        """Gets the bot_dev of this Badge.  # noqa: E501


        :return: The bot_dev of this Badge.  # noqa: E501
        :rtype: bool
        """
        return self._bot_dev

    @bot_dev.setter
    def bot_dev(self, bot_dev):
        """Sets the bot_dev of this Badge.


        :param bot_dev: The bot_dev of this Badge.  # noqa: E501
        :type: bool
        """

        self._bot_dev = bot_dev

    @property
    def support_server_member(self):
        """Gets the support_server_member of this Badge.  # noqa: E501


        :return: The support_server_member of this Badge.  # noqa: E501
        :rtype: bool
        """
        return self._support_server_member

    @support_server_member.setter
    def support_server_member(self, support_server_member):
        """Sets the support_server_member of this Badge.


        :param support_server_member: The support_server_member of this Badge.  # noqa: E501
        :type: bool
        """

        self._support_server_member = support_server_member

    @property
    def everyone(self):
        """Gets the everyone of this Badge.  # noqa: E501


        :return: The everyone of this Badge.  # noqa: E501
        :rtype: bool
        """
        return self._everyone

    @everyone.setter
    def everyone(self, everyone):
        """Sets the everyone of this Badge.


        :param everyone: The everyone of this Badge.  # noqa: E501
        :type: bool
        """

        self._everyone = everyone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Badge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Badge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
