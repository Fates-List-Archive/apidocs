# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'prefix': 'str',
        'library': 'str',
        'invite': 'str',
        'website': 'str',
        'description': 'str',
        'banner_card': 'str',
        'banner_page': 'str',
        'keep_banner_decor': 'bool',
        'extra_owners': 'list[str]',
        'support': 'str',
        'long_description': 'str',
        'css': 'str',
        'long_description_type': 'LongDescType',
        'nsfw': 'bool',
        'donate': 'str',
        'privacy_policy': 'str',
        'github': 'str',
        'webhook_type': 'int',
        'webhook': 'str',
        'webhook_secret': 'str',
        'vanity': 'str',
        'features': 'list[str]',
        'tags': 'list[str]',
        'system_bot': 'bool'
    }

    attribute_map = {
        'client_id': 'client_id',
        'prefix': 'prefix',
        'library': 'library',
        'invite': 'invite',
        'website': 'website',
        'description': 'description',
        'banner_card': 'banner_card',
        'banner_page': 'banner_page',
        'keep_banner_decor': 'keep_banner_decor',
        'extra_owners': 'extra_owners',
        'support': 'support',
        'long_description': 'long_description',
        'css': 'css',
        'long_description_type': 'long_description_type',
        'nsfw': 'nsfw',
        'donate': 'donate',
        'privacy_policy': 'privacy_policy',
        'github': 'github',
        'webhook_type': 'webhook_type',
        'webhook': 'webhook',
        'webhook_secret': 'webhook_secret',
        'vanity': 'vanity',
        'features': 'features',
        'tags': 'tags',
        'system_bot': 'system_bot'
    }

    def __init__(self, client_id=None, prefix=None, library=None, invite='P:0', website=None, description=None, banner_card=None, banner_page=None, keep_banner_decor=None, extra_owners=None, support=None, long_description=None, css=None, long_description_type=None, nsfw=None, donate=None, privacy_policy=None, github=None, webhook_type=0, webhook=None, webhook_secret=None, vanity=None, features=None, tags=None, system_bot=False):  # noqa: E501
        """BotMeta - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._prefix = None
        self._library = None
        self._invite = None
        self._website = None
        self._description = None
        self._banner_card = None
        self._banner_page = None
        self._keep_banner_decor = None
        self._extra_owners = None
        self._support = None
        self._long_description = None
        self._css = None
        self._long_description_type = None
        self._nsfw = None
        self._donate = None
        self._privacy_policy = None
        self._github = None
        self._webhook_type = None
        self._webhook = None
        self._webhook_secret = None
        self._vanity = None
        self._features = None
        self._tags = None
        self._system_bot = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if prefix is not None:
            self.prefix = prefix
        self.library = library
        if invite is not None:
            self.invite = invite
        if website is not None:
            self.website = website
        self.description = description
        if banner_card is not None:
            self.banner_card = banner_card
        if banner_page is not None:
            self.banner_page = banner_page
        self.keep_banner_decor = keep_banner_decor
        self.extra_owners = extra_owners
        if support is not None:
            self.support = support
        self.long_description = long_description
        if css is not None:
            self.css = css
        self.long_description_type = long_description_type
        self.nsfw = nsfw
        if donate is not None:
            self.donate = donate
        if privacy_policy is not None:
            self.privacy_policy = privacy_policy
        if github is not None:
            self.github = github
        if webhook_type is not None:
            self.webhook_type = webhook_type
        if webhook is not None:
            self.webhook = webhook
        if webhook_secret is not None:
            self.webhook_secret = webhook_secret
        self.vanity = vanity
        if features is not None:
            self.features = features
        self.tags = tags
        if system_bot is not None:
            self.system_bot = system_bot

    @property
    def client_id(self):
        """Gets the client_id of this BotMeta.  # noqa: E501


        :return: The client_id of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this BotMeta.


        :param client_id: The client_id of this BotMeta.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def prefix(self):
        """Gets the prefix of this BotMeta.  # noqa: E501


        :return: The prefix of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this BotMeta.


        :param prefix: The prefix of this BotMeta.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def library(self):
        """Gets the library of this BotMeta.  # noqa: E501


        :return: The library of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._library

    @library.setter
    def library(self, library):
        """Sets the library of this BotMeta.


        :param library: The library of this BotMeta.  # noqa: E501
        :type: str
        """
        if library is None:
            raise ValueError("Invalid value for `library`, must not be `None`")  # noqa: E501

        self._library = library

    @property
    def invite(self):
        """Gets the invite of this BotMeta.  # noqa: E501


        :return: The invite of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._invite

    @invite.setter
    def invite(self, invite):
        """Sets the invite of this BotMeta.


        :param invite: The invite of this BotMeta.  # noqa: E501
        :type: str
        """

        self._invite = invite

    @property
    def website(self):
        """Gets the website of this BotMeta.  # noqa: E501


        :return: The website of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this BotMeta.


        :param website: The website of this BotMeta.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def description(self):
        """Gets the description of this BotMeta.  # noqa: E501


        :return: The description of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BotMeta.


        :param description: The description of this BotMeta.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def banner_card(self):
        """Gets the banner_card of this BotMeta.  # noqa: E501


        :return: The banner_card of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._banner_card

    @banner_card.setter
    def banner_card(self, banner_card):
        """Sets the banner_card of this BotMeta.


        :param banner_card: The banner_card of this BotMeta.  # noqa: E501
        :type: str
        """

        self._banner_card = banner_card

    @property
    def banner_page(self):
        """Gets the banner_page of this BotMeta.  # noqa: E501


        :return: The banner_page of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._banner_page

    @banner_page.setter
    def banner_page(self, banner_page):
        """Sets the banner_page of this BotMeta.


        :param banner_page: The banner_page of this BotMeta.  # noqa: E501
        :type: str
        """

        self._banner_page = banner_page

    @property
    def keep_banner_decor(self):
        """Gets the keep_banner_decor of this BotMeta.  # noqa: E501


        :return: The keep_banner_decor of this BotMeta.  # noqa: E501
        :rtype: bool
        """
        return self._keep_banner_decor

    @keep_banner_decor.setter
    def keep_banner_decor(self, keep_banner_decor):
        """Sets the keep_banner_decor of this BotMeta.


        :param keep_banner_decor: The keep_banner_decor of this BotMeta.  # noqa: E501
        :type: bool
        """
        if keep_banner_decor is None:
            raise ValueError("Invalid value for `keep_banner_decor`, must not be `None`")  # noqa: E501

        self._keep_banner_decor = keep_banner_decor

    @property
    def extra_owners(self):
        """Gets the extra_owners of this BotMeta.  # noqa: E501


        :return: The extra_owners of this BotMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_owners

    @extra_owners.setter
    def extra_owners(self, extra_owners):
        """Sets the extra_owners of this BotMeta.


        :param extra_owners: The extra_owners of this BotMeta.  # noqa: E501
        :type: list[str]
        """
        if extra_owners is None:
            raise ValueError("Invalid value for `extra_owners`, must not be `None`")  # noqa: E501

        self._extra_owners = extra_owners

    @property
    def support(self):
        """Gets the support of this BotMeta.  # noqa: E501


        :return: The support of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._support

    @support.setter
    def support(self, support):
        """Sets the support of this BotMeta.


        :param support: The support of this BotMeta.  # noqa: E501
        :type: str
        """

        self._support = support

    @property
    def long_description(self):
        """Gets the long_description of this BotMeta.  # noqa: E501


        :return: The long_description of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this BotMeta.


        :param long_description: The long_description of this BotMeta.  # noqa: E501
        :type: str
        """
        if long_description is None:
            raise ValueError("Invalid value for `long_description`, must not be `None`")  # noqa: E501

        self._long_description = long_description

    @property
    def css(self):
        """Gets the css of this BotMeta.  # noqa: E501


        :return: The css of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this BotMeta.


        :param css: The css of this BotMeta.  # noqa: E501
        :type: str
        """

        self._css = css

    @property
    def long_description_type(self):
        """Gets the long_description_type of this BotMeta.  # noqa: E501


        :return: The long_description_type of this BotMeta.  # noqa: E501
        :rtype: LongDescType
        """
        return self._long_description_type

    @long_description_type.setter
    def long_description_type(self, long_description_type):
        """Sets the long_description_type of this BotMeta.


        :param long_description_type: The long_description_type of this BotMeta.  # noqa: E501
        :type: LongDescType
        """
        if long_description_type is None:
            raise ValueError("Invalid value for `long_description_type`, must not be `None`")  # noqa: E501

        self._long_description_type = long_description_type

    @property
    def nsfw(self):
        """Gets the nsfw of this BotMeta.  # noqa: E501


        :return: The nsfw of this BotMeta.  # noqa: E501
        :rtype: bool
        """
        return self._nsfw

    @nsfw.setter
    def nsfw(self, nsfw):
        """Sets the nsfw of this BotMeta.


        :param nsfw: The nsfw of this BotMeta.  # noqa: E501
        :type: bool
        """
        if nsfw is None:
            raise ValueError("Invalid value for `nsfw`, must not be `None`")  # noqa: E501

        self._nsfw = nsfw

    @property
    def donate(self):
        """Gets the donate of this BotMeta.  # noqa: E501


        :return: The donate of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._donate

    @donate.setter
    def donate(self, donate):
        """Sets the donate of this BotMeta.


        :param donate: The donate of this BotMeta.  # noqa: E501
        :type: str
        """

        self._donate = donate

    @property
    def privacy_policy(self):
        """Gets the privacy_policy of this BotMeta.  # noqa: E501


        :return: The privacy_policy of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._privacy_policy

    @privacy_policy.setter
    def privacy_policy(self, privacy_policy):
        """Sets the privacy_policy of this BotMeta.


        :param privacy_policy: The privacy_policy of this BotMeta.  # noqa: E501
        :type: str
        """

        self._privacy_policy = privacy_policy

    @property
    def github(self):
        """Gets the github of this BotMeta.  # noqa: E501


        :return: The github of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._github

    @github.setter
    def github(self, github):
        """Sets the github of this BotMeta.


        :param github: The github of this BotMeta.  # noqa: E501
        :type: str
        """

        self._github = github

    @property
    def webhook_type(self):
        """Gets the webhook_type of this BotMeta.  # noqa: E501


        :return: The webhook_type of this BotMeta.  # noqa: E501
        :rtype: int
        """
        return self._webhook_type

    @webhook_type.setter
    def webhook_type(self, webhook_type):
        """Sets the webhook_type of this BotMeta.


        :param webhook_type: The webhook_type of this BotMeta.  # noqa: E501
        :type: int
        """

        self._webhook_type = webhook_type

    @property
    def webhook(self):
        """Gets the webhook of this BotMeta.  # noqa: E501


        :return: The webhook of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this BotMeta.


        :param webhook: The webhook of this BotMeta.  # noqa: E501
        :type: str
        """

        self._webhook = webhook

    @property
    def webhook_secret(self):
        """Gets the webhook_secret of this BotMeta.  # noqa: E501


        :return: The webhook_secret of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._webhook_secret

    @webhook_secret.setter
    def webhook_secret(self, webhook_secret):
        """Sets the webhook_secret of this BotMeta.


        :param webhook_secret: The webhook_secret of this BotMeta.  # noqa: E501
        :type: str
        """

        self._webhook_secret = webhook_secret

    @property
    def vanity(self):
        """Gets the vanity of this BotMeta.  # noqa: E501


        :return: The vanity of this BotMeta.  # noqa: E501
        :rtype: str
        """
        return self._vanity

    @vanity.setter
    def vanity(self, vanity):
        """Sets the vanity of this BotMeta.


        :param vanity: The vanity of this BotMeta.  # noqa: E501
        :type: str
        """
        if vanity is None:
            raise ValueError("Invalid value for `vanity`, must not be `None`")  # noqa: E501

        self._vanity = vanity

    @property
    def features(self):
        """Gets the features of this BotMeta.  # noqa: E501


        :return: The features of this BotMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this BotMeta.


        :param features: The features of this BotMeta.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def tags(self):
        """Gets the tags of this BotMeta.  # noqa: E501


        :return: The tags of this BotMeta.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this BotMeta.


        :param tags: The tags of this BotMeta.  # noqa: E501
        :type: list[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def system_bot(self):
        """Gets the system_bot of this BotMeta.  # noqa: E501


        :return: The system_bot of this BotMeta.  # noqa: E501
        :rtype: bool
        """
        return self._system_bot

    @system_bot.setter
    def system_bot(self, system_bot):
        """Sets the system_bot of this BotMeta.


        :param system_bot: The system_bot of this BotMeta.  # noqa: E501
        :type: bool
        """

        self._system_bot = system_bot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
