# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotReviewPartialExt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'review': 'str',
        'star_rating': 'float',
        'reply': 'bool',
        'target_type': 'ReviewType',
        'target_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'review': 'review',
        'star_rating': 'star_rating',
        'reply': 'reply',
        'target_type': 'target_type',
        'target_id': 'target_id'
    }

    def __init__(self, id=None, review=None, star_rating=None, reply=False, target_type=None, target_id=None):  # noqa: E501
        """BotReviewPartialExt - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._review = None
        self._star_rating = None
        self._reply = None
        self._target_type = None
        self._target_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.review = review
        self.star_rating = star_rating
        if reply is not None:
            self.reply = reply
        self.target_type = target_type
        self.target_id = target_id

    @property
    def id(self):
        """Gets the id of this BotReviewPartialExt.  # noqa: E501


        :return: The id of this BotReviewPartialExt.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BotReviewPartialExt.


        :param id: The id of this BotReviewPartialExt.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def review(self):
        """Gets the review of this BotReviewPartialExt.  # noqa: E501


        :return: The review of this BotReviewPartialExt.  # noqa: E501
        :rtype: str
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this BotReviewPartialExt.


        :param review: The review of this BotReviewPartialExt.  # noqa: E501
        :type: str
        """
        if review is None:
            raise ValueError("Invalid value for `review`, must not be `None`")  # noqa: E501

        self._review = review

    @property
    def star_rating(self):
        """Gets the star_rating of this BotReviewPartialExt.  # noqa: E501


        :return: The star_rating of this BotReviewPartialExt.  # noqa: E501
        :rtype: float
        """
        return self._star_rating

    @star_rating.setter
    def star_rating(self, star_rating):
        """Sets the star_rating of this BotReviewPartialExt.


        :param star_rating: The star_rating of this BotReviewPartialExt.  # noqa: E501
        :type: float
        """
        if star_rating is None:
            raise ValueError("Invalid value for `star_rating`, must not be `None`")  # noqa: E501

        self._star_rating = star_rating

    @property
    def reply(self):
        """Gets the reply of this BotReviewPartialExt.  # noqa: E501


        :return: The reply of this BotReviewPartialExt.  # noqa: E501
        :rtype: bool
        """
        return self._reply

    @reply.setter
    def reply(self, reply):
        """Sets the reply of this BotReviewPartialExt.


        :param reply: The reply of this BotReviewPartialExt.  # noqa: E501
        :type: bool
        """

        self._reply = reply

    @property
    def target_type(self):
        """Gets the target_type of this BotReviewPartialExt.  # noqa: E501


        :return: The target_type of this BotReviewPartialExt.  # noqa: E501
        :rtype: ReviewType
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this BotReviewPartialExt.


        :param target_type: The target_type of this BotReviewPartialExt.  # noqa: E501
        :type: ReviewType
        """
        if target_type is None:
            raise ValueError("Invalid value for `target_type`, must not be `None`")  # noqa: E501

        self._target_type = target_type

    @property
    def target_id(self):
        """Gets the target_id of this BotReviewPartialExt.  # noqa: E501


        :return: The target_id of this BotReviewPartialExt.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this BotReviewPartialExt.


        :param target_id: The target_id of this BotReviewPartialExt.  # noqa: E501
        :type: str
        """
        if target_id is None:
            raise ValueError("Invalid value for `target_id`, must not be `None`")  # noqa: E501

        self._target_id = target_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotReviewPartialExt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotReviewPartialExt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
