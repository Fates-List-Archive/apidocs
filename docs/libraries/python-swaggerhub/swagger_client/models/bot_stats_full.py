# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotStatsFull(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bot_amount': 'int',
        'denied_amount': 'int',
        'banned_amount': 'int',
        'certified': 'BotPartialList',
        'queue': 'BotPartialList',
        'under_review': 'BotPartialList',
        'denied': 'BotPartialList',
        'banned': 'BotPartialList'
    }

    attribute_map = {
        'bot_amount': 'bot_amount',
        'denied_amount': 'denied_amount',
        'banned_amount': 'banned_amount',
        'certified': 'certified',
        'queue': 'queue',
        'under_review': 'under_review',
        'denied': 'denied',
        'banned': 'banned'
    }

    def __init__(self, bot_amount=None, denied_amount=None, banned_amount=None, certified=None, queue=None, under_review=None, denied=None, banned=None):  # noqa: E501
        """BotStatsFull - a model defined in Swagger"""  # noqa: E501
        self._bot_amount = None
        self._denied_amount = None
        self._banned_amount = None
        self._certified = None
        self._queue = None
        self._under_review = None
        self._denied = None
        self._banned = None
        self.discriminator = None
        self.bot_amount = bot_amount
        self.denied_amount = denied_amount
        self.banned_amount = banned_amount
        self.certified = certified
        self.queue = queue
        self.under_review = under_review
        if denied is not None:
            self.denied = denied
        if banned is not None:
            self.banned = banned

    @property
    def bot_amount(self):
        """Gets the bot_amount of this BotStatsFull.  # noqa: E501


        :return: The bot_amount of this BotStatsFull.  # noqa: E501
        :rtype: int
        """
        return self._bot_amount

    @bot_amount.setter
    def bot_amount(self, bot_amount):
        """Sets the bot_amount of this BotStatsFull.


        :param bot_amount: The bot_amount of this BotStatsFull.  # noqa: E501
        :type: int
        """
        if bot_amount is None:
            raise ValueError("Invalid value for `bot_amount`, must not be `None`")  # noqa: E501

        self._bot_amount = bot_amount

    @property
    def denied_amount(self):
        """Gets the denied_amount of this BotStatsFull.  # noqa: E501


        :return: The denied_amount of this BotStatsFull.  # noqa: E501
        :rtype: int
        """
        return self._denied_amount

    @denied_amount.setter
    def denied_amount(self, denied_amount):
        """Sets the denied_amount of this BotStatsFull.


        :param denied_amount: The denied_amount of this BotStatsFull.  # noqa: E501
        :type: int
        """
        if denied_amount is None:
            raise ValueError("Invalid value for `denied_amount`, must not be `None`")  # noqa: E501

        self._denied_amount = denied_amount

    @property
    def banned_amount(self):
        """Gets the banned_amount of this BotStatsFull.  # noqa: E501


        :return: The banned_amount of this BotStatsFull.  # noqa: E501
        :rtype: int
        """
        return self._banned_amount

    @banned_amount.setter
    def banned_amount(self, banned_amount):
        """Sets the banned_amount of this BotStatsFull.


        :param banned_amount: The banned_amount of this BotStatsFull.  # noqa: E501
        :type: int
        """
        if banned_amount is None:
            raise ValueError("Invalid value for `banned_amount`, must not be `None`")  # noqa: E501

        self._banned_amount = banned_amount

    @property
    def certified(self):
        """Gets the certified of this BotStatsFull.  # noqa: E501


        :return: The certified of this BotStatsFull.  # noqa: E501
        :rtype: BotPartialList
        """
        return self._certified

    @certified.setter
    def certified(self, certified):
        """Sets the certified of this BotStatsFull.


        :param certified: The certified of this BotStatsFull.  # noqa: E501
        :type: BotPartialList
        """
        if certified is None:
            raise ValueError("Invalid value for `certified`, must not be `None`")  # noqa: E501

        self._certified = certified

    @property
    def queue(self):
        """Gets the queue of this BotStatsFull.  # noqa: E501


        :return: The queue of this BotStatsFull.  # noqa: E501
        :rtype: BotPartialList
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this BotStatsFull.


        :param queue: The queue of this BotStatsFull.  # noqa: E501
        :type: BotPartialList
        """
        if queue is None:
            raise ValueError("Invalid value for `queue`, must not be `None`")  # noqa: E501

        self._queue = queue

    @property
    def under_review(self):
        """Gets the under_review of this BotStatsFull.  # noqa: E501


        :return: The under_review of this BotStatsFull.  # noqa: E501
        :rtype: BotPartialList
        """
        return self._under_review

    @under_review.setter
    def under_review(self, under_review):
        """Sets the under_review of this BotStatsFull.


        :param under_review: The under_review of this BotStatsFull.  # noqa: E501
        :type: BotPartialList
        """
        if under_review is None:
            raise ValueError("Invalid value for `under_review`, must not be `None`")  # noqa: E501

        self._under_review = under_review

    @property
    def denied(self):
        """Gets the denied of this BotStatsFull.  # noqa: E501


        :return: The denied of this BotStatsFull.  # noqa: E501
        :rtype: BotPartialList
        """
        return self._denied

    @denied.setter
    def denied(self, denied):
        """Sets the denied of this BotStatsFull.


        :param denied: The denied of this BotStatsFull.  # noqa: E501
        :type: BotPartialList
        """

        self._denied = denied

    @property
    def banned(self):
        """Gets the banned of this BotStatsFull.  # noqa: E501


        :return: The banned of this BotStatsFull.  # noqa: E501
        :rtype: BotPartialList
        """
        return self._banned

    @banned.setter
    def banned(self, banned):
        """Sets the banned of this BotStatsFull.


        :param banned: The banned of this BotStatsFull.  # noqa: E501
        :type: BotPartialList
        """

        self._banned = banned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotStatsFull, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotStatsFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
