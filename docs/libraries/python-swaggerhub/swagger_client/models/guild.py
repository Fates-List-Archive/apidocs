# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Guild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invite_channel': 'str',
        'user': 'BaseUser',
        'description': 'str',
        'tags': 'list[dict(str, str)]',
        'long_description_type': 'LongDescType',
        'long_description': 'str',
        'guild_count': 'int',
        'invite_amount': 'int',
        'total_votes': 'int',
        'user_whitelist': 'list[str]',
        'user_blacklist': 'list[str]',
        'state': 'BotState',
        'website': 'str',
        'css': 'str',
        'votes': 'int',
        'vanity': 'str',
        'nsfw': 'bool',
        'banner_card': 'str',
        'banner_page': 'str',
        'keep_banner_decor': 'bool'
    }

    attribute_map = {
        'invite_channel': 'invite_channel',
        'user': 'user',
        'description': 'description',
        'tags': 'tags',
        'long_description_type': 'long_description_type',
        'long_description': 'long_description',
        'guild_count': 'guild_count',
        'invite_amount': 'invite_amount',
        'total_votes': 'total_votes',
        'user_whitelist': 'user_whitelist',
        'user_blacklist': 'user_blacklist',
        'state': 'state',
        'website': 'website',
        'css': 'css',
        'votes': 'votes',
        'vanity': 'vanity',
        'nsfw': 'nsfw',
        'banner_card': 'banner_card',
        'banner_page': 'banner_page',
        'keep_banner_decor': 'keep_banner_decor'
    }

    def __init__(self, invite_channel=None, user=None, description=None, tags=None, long_description_type=None, long_description=None, guild_count=None, invite_amount=None, total_votes=None, user_whitelist=None, user_blacklist=None, state=None, website=None, css=None, votes=None, vanity=None, nsfw=None, banner_card=None, banner_page=None, keep_banner_decor=None):  # noqa: E501
        """Guild - a model defined in Swagger"""  # noqa: E501
        self._invite_channel = None
        self._user = None
        self._description = None
        self._tags = None
        self._long_description_type = None
        self._long_description = None
        self._guild_count = None
        self._invite_amount = None
        self._total_votes = None
        self._user_whitelist = None
        self._user_blacklist = None
        self._state = None
        self._website = None
        self._css = None
        self._votes = None
        self._vanity = None
        self._nsfw = None
        self._banner_card = None
        self._banner_page = None
        self._keep_banner_decor = None
        self.discriminator = None
        if invite_channel is not None:
            self.invite_channel = invite_channel
        self.user = user
        if description is not None:
            self.description = description
        self.tags = tags
        if long_description_type is not None:
            self.long_description_type = long_description_type
        if long_description is not None:
            self.long_description = long_description
        self.guild_count = guild_count
        self.invite_amount = invite_amount
        self.total_votes = total_votes
        if user_whitelist is not None:
            self.user_whitelist = user_whitelist
        if user_blacklist is not None:
            self.user_blacklist = user_blacklist
        self.state = state
        if website is not None:
            self.website = website
        if css is not None:
            self.css = css
        self.votes = votes
        if vanity is not None:
            self.vanity = vanity
        self.nsfw = nsfw
        if banner_card is not None:
            self.banner_card = banner_card
        if banner_page is not None:
            self.banner_page = banner_page
        if keep_banner_decor is not None:
            self.keep_banner_decor = keep_banner_decor

    @property
    def invite_channel(self):
        """Gets the invite_channel of this Guild.  # noqa: E501


        :return: The invite_channel of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._invite_channel

    @invite_channel.setter
    def invite_channel(self, invite_channel):
        """Sets the invite_channel of this Guild.


        :param invite_channel: The invite_channel of this Guild.  # noqa: E501
        :type: str
        """

        self._invite_channel = invite_channel

    @property
    def user(self):
        """Gets the user of this Guild.  # noqa: E501


        :return: The user of this Guild.  # noqa: E501
        :rtype: BaseUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Guild.


        :param user: The user of this Guild.  # noqa: E501
        :type: BaseUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def description(self):
        """Gets the description of this Guild.  # noqa: E501


        :return: The description of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Guild.


        :param description: The description of this Guild.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this Guild.  # noqa: E501


        :return: The tags of this Guild.  # noqa: E501
        :rtype: list[dict(str, str)]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Guild.


        :param tags: The tags of this Guild.  # noqa: E501
        :type: list[dict(str, str)]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def long_description_type(self):
        """Gets the long_description_type of this Guild.  # noqa: E501


        :return: The long_description_type of this Guild.  # noqa: E501
        :rtype: LongDescType
        """
        return self._long_description_type

    @long_description_type.setter
    def long_description_type(self, long_description_type):
        """Sets the long_description_type of this Guild.


        :param long_description_type: The long_description_type of this Guild.  # noqa: E501
        :type: LongDescType
        """

        self._long_description_type = long_description_type

    @property
    def long_description(self):
        """Gets the long_description of this Guild.  # noqa: E501


        :return: The long_description of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this Guild.


        :param long_description: The long_description of this Guild.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    @property
    def guild_count(self):
        """Gets the guild_count of this Guild.  # noqa: E501


        :return: The guild_count of this Guild.  # noqa: E501
        :rtype: int
        """
        return self._guild_count

    @guild_count.setter
    def guild_count(self, guild_count):
        """Sets the guild_count of this Guild.


        :param guild_count: The guild_count of this Guild.  # noqa: E501
        :type: int
        """
        if guild_count is None:
            raise ValueError("Invalid value for `guild_count`, must not be `None`")  # noqa: E501

        self._guild_count = guild_count

    @property
    def invite_amount(self):
        """Gets the invite_amount of this Guild.  # noqa: E501


        :return: The invite_amount of this Guild.  # noqa: E501
        :rtype: int
        """
        return self._invite_amount

    @invite_amount.setter
    def invite_amount(self, invite_amount):
        """Sets the invite_amount of this Guild.


        :param invite_amount: The invite_amount of this Guild.  # noqa: E501
        :type: int
        """
        if invite_amount is None:
            raise ValueError("Invalid value for `invite_amount`, must not be `None`")  # noqa: E501

        self._invite_amount = invite_amount

    @property
    def total_votes(self):
        """Gets the total_votes of this Guild.  # noqa: E501


        :return: The total_votes of this Guild.  # noqa: E501
        :rtype: int
        """
        return self._total_votes

    @total_votes.setter
    def total_votes(self, total_votes):
        """Sets the total_votes of this Guild.


        :param total_votes: The total_votes of this Guild.  # noqa: E501
        :type: int
        """
        if total_votes is None:
            raise ValueError("Invalid value for `total_votes`, must not be `None`")  # noqa: E501

        self._total_votes = total_votes

    @property
    def user_whitelist(self):
        """Gets the user_whitelist of this Guild.  # noqa: E501


        :return: The user_whitelist of this Guild.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_whitelist

    @user_whitelist.setter
    def user_whitelist(self, user_whitelist):
        """Sets the user_whitelist of this Guild.


        :param user_whitelist: The user_whitelist of this Guild.  # noqa: E501
        :type: list[str]
        """

        self._user_whitelist = user_whitelist

    @property
    def user_blacklist(self):
        """Gets the user_blacklist of this Guild.  # noqa: E501


        :return: The user_blacklist of this Guild.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_blacklist

    @user_blacklist.setter
    def user_blacklist(self, user_blacklist):
        """Sets the user_blacklist of this Guild.


        :param user_blacklist: The user_blacklist of this Guild.  # noqa: E501
        :type: list[str]
        """

        self._user_blacklist = user_blacklist

    @property
    def state(self):
        """Gets the state of this Guild.  # noqa: E501


        :return: The state of this Guild.  # noqa: E501
        :rtype: BotState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Guild.


        :param state: The state of this Guild.  # noqa: E501
        :type: BotState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def website(self):
        """Gets the website of this Guild.  # noqa: E501


        :return: The website of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Guild.


        :param website: The website of this Guild.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def css(self):
        """Gets the css of this Guild.  # noqa: E501


        :return: The css of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this Guild.


        :param css: The css of this Guild.  # noqa: E501
        :type: str
        """

        self._css = css

    @property
    def votes(self):
        """Gets the votes of this Guild.  # noqa: E501


        :return: The votes of this Guild.  # noqa: E501
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this Guild.


        :param votes: The votes of this Guild.  # noqa: E501
        :type: int
        """
        if votes is None:
            raise ValueError("Invalid value for `votes`, must not be `None`")  # noqa: E501

        self._votes = votes

    @property
    def vanity(self):
        """Gets the vanity of this Guild.  # noqa: E501


        :return: The vanity of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._vanity

    @vanity.setter
    def vanity(self, vanity):
        """Sets the vanity of this Guild.


        :param vanity: The vanity of this Guild.  # noqa: E501
        :type: str
        """

        self._vanity = vanity

    @property
    def nsfw(self):
        """Gets the nsfw of this Guild.  # noqa: E501


        :return: The nsfw of this Guild.  # noqa: E501
        :rtype: bool
        """
        return self._nsfw

    @nsfw.setter
    def nsfw(self, nsfw):
        """Sets the nsfw of this Guild.


        :param nsfw: The nsfw of this Guild.  # noqa: E501
        :type: bool
        """
        if nsfw is None:
            raise ValueError("Invalid value for `nsfw`, must not be `None`")  # noqa: E501

        self._nsfw = nsfw

    @property
    def banner_card(self):
        """Gets the banner_card of this Guild.  # noqa: E501


        :return: The banner_card of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._banner_card

    @banner_card.setter
    def banner_card(self, banner_card):
        """Sets the banner_card of this Guild.


        :param banner_card: The banner_card of this Guild.  # noqa: E501
        :type: str
        """

        self._banner_card = banner_card

    @property
    def banner_page(self):
        """Gets the banner_page of this Guild.  # noqa: E501


        :return: The banner_page of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._banner_page

    @banner_page.setter
    def banner_page(self, banner_page):
        """Sets the banner_page of this Guild.


        :param banner_page: The banner_page of this Guild.  # noqa: E501
        :type: str
        """

        self._banner_page = banner_page

    @property
    def keep_banner_decor(self):
        """Gets the keep_banner_decor of this Guild.  # noqa: E501


        :return: The keep_banner_decor of this Guild.  # noqa: E501
        :rtype: bool
        """
        return self._keep_banner_decor

    @keep_banner_decor.setter
    def keep_banner_decor(self, keep_banner_decor):
        """Sets the keep_banner_decor of this Guild.


        :param keep_banner_decor: The keep_banner_decor of this Guild.  # noqa: E501
        :type: bool
        """

        self._keep_banner_decor = keep_banner_decor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Guild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Guild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
