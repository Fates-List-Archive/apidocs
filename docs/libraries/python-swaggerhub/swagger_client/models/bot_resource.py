# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_title': 'str',
        'resource_link': 'str',
        'resource_description': 'str'
    }

    attribute_map = {
        'resource_title': 'resource_title',
        'resource_link': 'resource_link',
        'resource_description': 'resource_description'
    }

    def __init__(self, resource_title=None, resource_link=None, resource_description=None):  # noqa: E501
        """BotResource - a model defined in Swagger"""  # noqa: E501
        self._resource_title = None
        self._resource_link = None
        self._resource_description = None
        self.discriminator = None
        self.resource_title = resource_title
        self.resource_link = resource_link
        self.resource_description = resource_description

    @property
    def resource_title(self):
        """Gets the resource_title of this BotResource.  # noqa: E501


        :return: The resource_title of this BotResource.  # noqa: E501
        :rtype: str
        """
        return self._resource_title

    @resource_title.setter
    def resource_title(self, resource_title):
        """Sets the resource_title of this BotResource.


        :param resource_title: The resource_title of this BotResource.  # noqa: E501
        :type: str
        """
        if resource_title is None:
            raise ValueError("Invalid value for `resource_title`, must not be `None`")  # noqa: E501

        self._resource_title = resource_title

    @property
    def resource_link(self):
        """Gets the resource_link of this BotResource.  # noqa: E501


        :return: The resource_link of this BotResource.  # noqa: E501
        :rtype: str
        """
        return self._resource_link

    @resource_link.setter
    def resource_link(self, resource_link):
        """Sets the resource_link of this BotResource.


        :param resource_link: The resource_link of this BotResource.  # noqa: E501
        :type: str
        """
        if resource_link is None:
            raise ValueError("Invalid value for `resource_link`, must not be `None`")  # noqa: E501

        self._resource_link = resource_link

    @property
    def resource_description(self):
        """Gets the resource_description of this BotResource.  # noqa: E501


        :return: The resource_description of this BotResource.  # noqa: E501
        :rtype: str
        """
        return self._resource_description

    @resource_description.setter
    def resource_description(self, resource_description):
        """Sets the resource_description of this BotResource.


        :param resource_description: The resource_description of this BotResource.  # noqa: E501
        :type: str
        """
        if resource_description is None:
            raise ValueError("Invalid value for `resource_description`, must not be `None`")  # noqa: E501

        self._resource_description = resource_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
