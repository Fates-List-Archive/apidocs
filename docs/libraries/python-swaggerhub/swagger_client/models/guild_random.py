# coding: utf-8

"""
    Fates List

                 Current API: v2 beta 3             Default API: v2             API URL: https://api.fateslist.xyz             API Docs: https://apidocs.fateslist.xyz             Enum Reference: https://apidocs.fateslist.xyz/structures/enums.autogen           # noqa: E501

    OpenAPI spec version: 0.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GuildRandom(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guild_id': 'str',
        'description': 'str',
        'banner_card': 'str',
        'state': 'int',
        'username': 'str',
        'avatar': 'str',
        'guild_count': 'int',
        'votes': 'int',
        'formatted': 'GCVFormat'
    }

    attribute_map = {
        'guild_id': 'guild_id',
        'description': 'description',
        'banner_card': 'banner_card',
        'state': 'state',
        'username': 'username',
        'avatar': 'avatar',
        'guild_count': 'guild_count',
        'votes': 'votes',
        'formatted': 'formatted'
    }

    def __init__(self, guild_id=None, description=None, banner_card=None, state=None, username=None, avatar=None, guild_count=None, votes=None, formatted=None):  # noqa: E501
        """GuildRandom - a model defined in Swagger"""  # noqa: E501
        self._guild_id = None
        self._description = None
        self._banner_card = None
        self._state = None
        self._username = None
        self._avatar = None
        self._guild_count = None
        self._votes = None
        self._formatted = None
        self.discriminator = None
        self.guild_id = guild_id
        self.description = description
        if banner_card is not None:
            self.banner_card = banner_card
        self.state = state
        self.username = username
        self.avatar = avatar
        self.guild_count = guild_count
        self.votes = votes
        self.formatted = formatted

    @property
    def guild_id(self):
        """Gets the guild_id of this GuildRandom.  # noqa: E501


        :return: The guild_id of this GuildRandom.  # noqa: E501
        :rtype: str
        """
        return self._guild_id

    @guild_id.setter
    def guild_id(self, guild_id):
        """Sets the guild_id of this GuildRandom.


        :param guild_id: The guild_id of this GuildRandom.  # noqa: E501
        :type: str
        """
        if guild_id is None:
            raise ValueError("Invalid value for `guild_id`, must not be `None`")  # noqa: E501

        self._guild_id = guild_id

    @property
    def description(self):
        """Gets the description of this GuildRandom.  # noqa: E501


        :return: The description of this GuildRandom.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GuildRandom.


        :param description: The description of this GuildRandom.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def banner_card(self):
        """Gets the banner_card of this GuildRandom.  # noqa: E501


        :return: The banner_card of this GuildRandom.  # noqa: E501
        :rtype: str
        """
        return self._banner_card

    @banner_card.setter
    def banner_card(self, banner_card):
        """Sets the banner_card of this GuildRandom.


        :param banner_card: The banner_card of this GuildRandom.  # noqa: E501
        :type: str
        """

        self._banner_card = banner_card

    @property
    def state(self):
        """Gets the state of this GuildRandom.  # noqa: E501


        :return: The state of this GuildRandom.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GuildRandom.


        :param state: The state of this GuildRandom.  # noqa: E501
        :type: int
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def username(self):
        """Gets the username of this GuildRandom.  # noqa: E501


        :return: The username of this GuildRandom.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this GuildRandom.


        :param username: The username of this GuildRandom.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def avatar(self):
        """Gets the avatar of this GuildRandom.  # noqa: E501


        :return: The avatar of this GuildRandom.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this GuildRandom.


        :param avatar: The avatar of this GuildRandom.  # noqa: E501
        :type: str
        """
        if avatar is None:
            raise ValueError("Invalid value for `avatar`, must not be `None`")  # noqa: E501

        self._avatar = avatar

    @property
    def guild_count(self):
        """Gets the guild_count of this GuildRandom.  # noqa: E501


        :return: The guild_count of this GuildRandom.  # noqa: E501
        :rtype: int
        """
        return self._guild_count

    @guild_count.setter
    def guild_count(self, guild_count):
        """Sets the guild_count of this GuildRandom.


        :param guild_count: The guild_count of this GuildRandom.  # noqa: E501
        :type: int
        """
        if guild_count is None:
            raise ValueError("Invalid value for `guild_count`, must not be `None`")  # noqa: E501

        self._guild_count = guild_count

    @property
    def votes(self):
        """Gets the votes of this GuildRandom.  # noqa: E501


        :return: The votes of this GuildRandom.  # noqa: E501
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes):
        """Sets the votes of this GuildRandom.


        :param votes: The votes of this GuildRandom.  # noqa: E501
        :type: int
        """
        if votes is None:
            raise ValueError("Invalid value for `votes`, must not be `None`")  # noqa: E501

        self._votes = votes

    @property
    def formatted(self):
        """Gets the formatted of this GuildRandom.  # noqa: E501


        :return: The formatted of this GuildRandom.  # noqa: E501
        :rtype: GCVFormat
        """
        return self._formatted

    @formatted.setter
    def formatted(self, formatted):
        """Sets the formatted of this GuildRandom.


        :param formatted: The formatted of this GuildRandom.  # noqa: E501
        :type: GCVFormat
        """
        if formatted is None:
            raise ValueError("Invalid value for `formatted`, must not be `None`")  # noqa: E501

        self._formatted = formatted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GuildRandom, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuildRandom):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
